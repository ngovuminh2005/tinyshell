# Tinyshell Test Script (focused_project_tests.tsh)
# This script tests various features of the Tinyshell.

# Phase 1: Basic REPL and Prompt
# (Manual check: Does prompt look like G1-Shell C:\... $ ?)
echo --- Phase 1: Basic REPL and Prompt Tests ---
pwd

# Phase 2: Lexer and Parser
echo --- Phase 2: Lexer and Parser Tests ---
echo Simple command
echo Command with args arg1 arg2
echo Command with "quoted argument"
echo Command with 	multiple   spaces
echo Command with escaped \" quote
# This is a comment, should be ignored
echo Command after comment # Another comment
echo Unclosed quote test: echo "hello
# (Manual check: Should report parse error)

# Phase 3: Execution Engine
echo --- Phase 3: Execution Engine Tests ---
# External command execution
dir # Assumes dir command exists on Windows
# Pipeline execution
echo Testing pipeline | findstr "pipeline" # Assumes findstr exists
# I/O Redirection
echo "Output redirection test" > test_output.txt
type test_output.txt # Assumes type command exists
echo "Append test" >> test_output.txt
type test_output.txt
# Create input file for testing
echo Line 1 > test_input.txt
echo Line 2 >> test_input.txt
echo Line 3 >> test_input.txt
sort < test_input.txt # Assumes sort command exists
# Here-string (Basic test)
# findstr "Here" <<< "This is a Here-string"
# Here-document (Basic test)
# findstr "doc" << EOF
# This is line 1 of the here-doc
# This is line 2
# EOF
# Background process and Job Control
echo Starting background process...
ping 127.0.0.1 -n 2 > nul & # Ping localhost twice in background, suppress output
jobs
echo Waiting a bit for job to potentially finish...
# (Manual check: jobs output, fg usage)
# fg %1 # Attempt to bring job 1 to foreground (might finish quickly)
# echo Job status after fg: $?
# Signal Handling (Manual Test)
# Run a long command like `ping google.com -t &` then `fg %1` and press Ctrl+C
# Exit Status
echo Test command > nul
echo Exit status of echo: $?
non_existent_command_xyz123
echo Exit status of non-existent command: $?

# Phase 4: Expansions and Globbing
echo --- Phase 4: Expansions and Globbing Tests ---
# Tilde Expansion
echo Home directory: ~
# Parameter Expansion
TESTVAR=HelloShell
echo Variable test: $TESTVAR
echo Braced var: ${TESTVAR}!
echo Exit status var: $?
# Arithmetic Expansion
echo Arithmetic: $((10 + 5 * 2))
XVAR=5
echo Arithmetic with var: $(($XVAR * 3))
echo Arithmetic error test: $((10 / 0))
# Command Substitution
echo Current dir via sub: $(pwd)
echo Files via sub: $(dir /b *.txt) # dir /b lists bare names
# Globbing
echo Text files: *.txt
echo Test files: test_*.txt

# Phase 5: Built-in Commands
echo --- Phase 5: Built-in Commands Tests ---
# cd, pwd
pwd
cd ..
pwd
cd tinyshell # Go back into project dir assuming started there
pwd
cd non_existent_dir
echo Status after failed cd: $?
# echo
echo Hello there friend
# jobs, fg (tested partially above)
jobs
# help
help
help cd
help unknown_cmd
# path, addpath
path
addpath C:\TestPathAddition
path
# intro
intro
# c, cpp (Requires test files and gcc/g++ in PATH)
echo "#include <stdio.h>\nint main() { printf(\"Hello from C\\n\"); return 0; }" > test.c
c test.c
echo "#include <iostream>\nint main() { std::cout << \"Hello from C++\\n\"; return 0; }" > test.cpp
cpp test.cpp
# history (Manual check: Does it show recent commands?)
history 10
# test / [
 test -f README.md
 echo README exists status: $?
 [ -d src ]
 echo src dir exists status: $?
 test "hello" = "hello"
 echo String equals status: $?
 [ "hello" != "world" ]
 echo String not equals status: $?
 test 10 -gt 5
 echo Integer GT status: $?
 [ 5 -le 5 ]
 echo Integer LE status: $?
 test
 echo Empty test status: $?
 [ -f non_existent_file.xyz ]
 echo Non-existent file status: $?
# export
export MYTESTEXPORT=ExportValue
# (Manual check: Run another shell or command that shows environment)

# Phase 6: Control Flow and Variables
echo --- Phase 6: Control Flow and Variables Tests ---
# Variable Assignment
LOCALVAR=LocalValue
echo Local var: $LOCALVAR
ASSIGNVAR=TempValue echo Assigned var: $ASSIGNVAR # Should print TempValue
echo Original ASSIGNVAR: $ASSIGNVAR # Should be empty or previous value
# If statement
if test 1 -eq 1; then echo If condition true; fi
if [ 1 -eq 0 ]; then echo Should not print; else echo Else branch executed; fi
if test -f non_existent_file.xyz; then echo Should not print; elif test -f README.md; then echo Elif branch executed; fi
# While loop
WCOUNT=0
while [ $WCOUNT -lt 2 ]; do
  echo While loop count: $WCOUNT
  WCOUNT=$(($WCOUNT + 1))
done
# For loop
for ITEM in one two three; do
  echo For loop item: $ITEM
done

# Cleanup
echo --- Test Cleanup ---
del test_output.txt test_input.txt test.c test.cpp _tinyshell_temp.exe > nul 2> nul # Assumes del command
echo Tests completed.
exit 0

